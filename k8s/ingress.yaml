apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: gliner-api-ingress
  namespace: ${NAMESPACE}
  labels:
    app: gliner-api
    environment: ${ENVIRONMENT}
  annotations:
    # General configuration
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/proxy-body-size: "5m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "180"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "180"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "180"
    nginx.ingress.kubernetes.io/proxy-next-upstream-timeout: "180"
    
    # Security configurations
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    # Security headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-XSS-Protection: 1; mode=block";
      more_set_headers "Referrer-Policy: strict-origin-when-cross-origin";
      more_set_headers "Content-Security-Policy: default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; connect-src 'self'";
    
    # Rate limiting
    nginx.ingress.kubernetes.io/limit-connections: "100"
    nginx.ingress.kubernetes.io/limit-rps: "50"
    nginx.ingress.kubernetes.io/limit-rpm: "2000"
    
    # SSL/TLS configuration
    cert-manager.io/cluster-issuer: "letsencrypt-${ENVIRONMENT}"
    
    # Monitoring
    prometheus.io/scrape: "true"
    prometheus.io/port: "10254"
    
    # Authentication - Enable if additional auth required
    # nginx.ingress.kubernetes.io/auth-type: basic
    # nginx.ingress.kubernetes.io/auth-secret: gliner-basic-auth
    # nginx.ingress.kubernetes.io/auth-realm: "Authentication Required"
spec:
  # TLS configuration
  tls:
  - hosts:
    - gliner-api-${ENVIRONMENT}.example.com
    secretName: gliner-api-tls-${ENVIRONMENT}
  
  # Routing rules
  rules:
  - host: gliner-api-${ENVIRONMENT}.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: gliner-api
            port:
              number: 80
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: gliner-api
            port:
              number: 80
      - path: /metrics
        pathType: Exact
        backend:
          service:
            name: gliner-api
            port:
              number: 80
      - path: /health
        pathType: Exact
        backend:
          service:
            name: gliner-api
            port:
              number: 80